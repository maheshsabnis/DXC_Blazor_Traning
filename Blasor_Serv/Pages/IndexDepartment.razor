@page "/deptindex"
@using Blasor_Serv.Models
@using Blasor_Serv.Services
@using System.Reflection

@*/* The Navigation Manager Service to Navigate */*@
@inject NavigationManager navigate

@inject IService<Department,int> deptServ

<h3>List of Department</h3>

<input type="button" value="Add new Department" class="btn btn-danger" @onclick="@navigateToCreate"/>

<div class="container">
    <table class="table-bordered table table-striped">
        <thead>
            <tr>
                 @foreach (var p in columns)
                 {
                     <th>@p</th>
                 }
            </tr>
        </thead>
        <tbody>
            @foreach (var dept in departments)
            {
                <tr>
                    @foreach(var col in columns)
                    {
                    <td>
                        @dept.GetType().GetProperty(col).GetValue(dept,null)
                    </td>
                    }
                    <td>
                        <input type="button" value="Edit" class="btn btn-primary" 
                               @onclick="@((evt)=>navigateToEdit(dept.DeptNo))" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    // private properties, those are scopped to the Current Component
    // thse properties will be used for Binding with HTML elements for Read/Write operations
    // also to generate HTML UI dynamically
    List<Department> departments;
    Department dept;
    List<string> columns;
    // using the Lifecycle method of the ComponentBase
    protected override async Task OnInitializedAsync()
    {
        departments = new List<Department>();
        dept = new Department();
        columns = new List<string>();

        // reading all properties of Department
        PropertyInfo[] properties = dept.GetType().GetProperties(
              BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance
            );

        foreach (var prop in properties)
        {
            columns.Add(prop.Name);
        }

        var res = await deptServ.GetAsync();
        departments = res.ToList();
    }

    void navigateToCreate()
    {
        navigate.NavigateTo("/deptcreate");
    }

    void navigateToEdit(int id)
    {
        navigate.NavigateTo($"/deptedit/{id}");
    }

}
